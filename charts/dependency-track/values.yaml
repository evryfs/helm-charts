# Default values for dependency-track.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
# Since dependency-track 4.0, there are now two separate images. One for frontend, one for the apiserver.

global:
  imageRegistry: docker.io

# The frontend
frontend:
  enabled: true
  replicaCount: 2
  image:
    repository: dependencytrack/frontend
    tag: 4.2.0
    pullPolicy: IfNotPresent
    imagePullSecrets: []
  # https://github.com/DependencyTrack/frontend/issues/60
  # configmap:
  #  config: |
  #    {
  #      "API_BASE_URL": "",
  #      "OIDC_ISSUER": "",
  #      "OIDC_CLIENT_ID": "",
  #      "OIDC_SCOPE": "openid profile email",
  #      "OIDC_FLOW": ""
  #    }
  env:
    - name: API_BASE_URL
      value: ""
    # Note: leave this blank if you are using the ingress provided by this chart-example
    # If you don't use the ingress (or route in OpenShift) then set this to be "http://127.0.0.1:8081" and use port-forwarding
    # This avoids exposing the apiserver to the Internet.
    # To use DepTrack, you will need to "<kubectl|oc> port-forward svc/<release-name>-frontend 8080:80" and at the same time "<kubectl|oc> port-forward svc/<release-name>-apiserver 8081:80"
    # Then browse to 127.0.0.1:8080 to login to the UI. This will then communicate with the apiserver via loopback on port tcp/8081
    # See https://docs.dependencytrack.org/getting-started/configuration/ for frontend ENV variables.
  # enabled needs to false for restricted SCC or true for anyuid SCC and Kubernetes
  podSecurityContext:
    enabled: false
    fsGroup: 1000
  # enabled needs to false for restricted SCC or true for anyuid SCC and Kubernetes
  securityContext:
    enabled: true
    allowPrivilegeEscalation: false
    # rootfs cannot be R/O because there is some messing around with file generation and whatnot
    runAsUser: 101
  service:
    type: ClusterIP
    port: 80
    annotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  emptyDir:
    sizeLimit: 8Gi
  resources:
  # https://docs.dependencytrack.org/getting-started/deploy-docker/
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 1
      memory: 512Mi
  nameOverride: ""
  fullnameOverride: ""
  initContainers:
    enabled: true
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: frontend-serviceaccount
  readinessProbe:
    initialDelaySeconds: 60
  livenessProbe:
    initialDelaySeconds: 60

# The apiserver
apiserver:
  enabled: true
# Max: 1 - DT is not designed for HA
  replicaCount: 1
  image:
    repository: dependencytrack/apiserver
    tag: 4.2.1
    imagePullSecrets: []
    pullPolicy: IfNotPresent
  env: []
  persistentVolume:
    enabled: true
    size: 8Gi
    annotations: {}
    storageClass: ""
  # enabled needs to false for restricted SCC or true for anyuid SCC and Kubernetes
  podSecurityContext:
    enabled: true
    fsGroup: 1000
  # enabled needs to false for restricted SCC or true for anyuid SCC and Kubernetes
  securityContext:
    enabled: true
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    capabilities:
      drop:
      - ALL
  service:
    type: ClusterIP
    port: 80
    annotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  emptyDir:
    sizeLimit: 8Gi
  resources:
  # https://docs.dependencytrack.org/getting-started/deploy-docker/
    requests:
      cpu: 2
      memory: 4608Mi
    limits:
      cpu: 4
      memory: 16Gi
  nameOverride: ""
  fullnameOverride: ""
  initContainers:
    enabled: true
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: apiserver-serviceaccount
  # See https://docs.dependencytrack.org/getting-started/configuration/ for backend configuration options.
  readinessProbe:
    initialDelaySeconds: 60
  livenessProbe:
    initialDelaySeconds: 60

initContainer: # initContainer to check DB is up and contactable
  enabled: true
  name: wait-for-db
  image: 
    repository: busybox
    tag: 1.33.0-uclibc
    pullPolicy: IfNotPresent
  imagePullSecrets: []
  resources:
    limits:
      cpu: 200m
      memory: 500Mi
    requests:
      cpu: 100m
      memory: 200Mi

ingress:
  enabled: false
  tls:
    enabled: false
    secretName: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    ## allow large bom.xml uploads:
    # nginx.ingress.kubernetes.io/proxy-body-size: 10m
  host: chart-example.local

# Postgres variables
postgresql:
  enabled: true
  postgresqlUsername: deptrack
  postgresqlPassword: deptrack
  postgresqlDatabase: deptrack
  serviceAccount:
    enabled: true
  resources:
    requests:
      memory: 256Mi
      cpu: 250m
    limits:
      memory: 2Gi
      cpu: 2
  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: 20Gi
    storageClass:
    annotations:
      helm.sh/resource-policy: "keep"
  containerSecurityContext:
    # enabled needs to false for restricted SCC or true for anyuid SCC and Kubernetes
    enabled: true
    runAsUser: 1001
  securityContext:
    # enabled needs to false for restricted SCC or true for anyuid SCC and Kubernetes
    enabled: true
    # fsGroup and runAsUser specifications below are not applied if enabled=false. enabled=false is the required setting for OpenShift "restricted SCC" to work successfully.
    fsGroup: 1001
    runAsUser: 1001
  volumePermissions:
    enabled: true
    # if using restricted SCC set runAsUser: "auto" and if running under anyuid SCC - runAsUser needs to match the above
    securityContext:
      runAsUser: 1001
  shmVolume:
    chmod:
      enabled: false