{{- if eq .Values.controller "statefulset" }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
  annotations:
    checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
spec:
  serviceName: {{ template "fullname" . }}
  replicas: {{ .Values.statefulset.replicas }}
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
      release: "{{ .Release.Name }}"
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
    spec:
      nodeSelector: {{ toYaml .Values.nodeSelector | nindent 8 }}
      tolerations: {{ toYaml .Values.tolerations | nident 8 }}
      affinity:
        podAntiAffinity:
        {{- if eq .Values.statefulset.antiAffinity "hard" }}
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: "kubernetes.io/hostname"
            labelSelector:
              matchLabels:
                app:  {{ template "fullname" . }}
                release: {{ .Release.Name | quote }}
        {{- else if eq .Values.statefulset.antiAffinity "soft" }}
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 5
            podAffinityTerm:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app:  {{ template "fullname" . }}
                  release: {{ .Release.Name | quote }}
        {{- end }}
      securityContext: {{ toYaml .Values.securityContext | nindent 8 }}
      containers:
      - name: {{ template "fullname" . }}
        image: {{ .Values.image }}
        imagePullPolicy: {{ default "" .Values.imagePullPolicy | quote }}
        command: ["mcrouter"]
        args:
        - -p {{ .Values.mcrouterCommandParams.port }}
        - --config-file=/etc/mcrouter/config.json
        securityContext: {{ toYaml .Values.containerSecurityContext | nindent 10 }}
        volumeMounts:
        - name: config
          mountPath: /etc/mcrouter
        - name: var-mcrouter
          mountPath: /var/mcrouter
        - name: var-spool-mcrouter
          mountPath: /var/spool/mcrouter
        ports:
        - name: mcrouter-port
          containerPort: {{ .Values.mcrouterCommandParams.port }}
        livenessProbe:
          tcpSocket:
            port: mcrouter-port
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: mcrouter-port
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
{{ toYaml .Values.resources | indent 10 }}
      {{- if .Values.exporter.enabled }}
      - name: exporter
        image: {{ .Values.exporter.image.repository }}:{{ .Values.exporter.image.tag }}
        resources:
{{ toYaml .Values.exporter.resources | indent 10 }}
        ports:
        - name: monitoring
          containerPort: {{ .Values.exporter.service.port }}
        livenessProbe:
          tcpSocket:
            port: monitoring
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: monitoring
          initialDelaySeconds: 5
          timeoutSeconds: 5
      {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ template "fullname" . }}
      - name: var-mcrouter
        emptyDir: {}
      - name: var-spool-mcrouter
        emptyDir: {}
{{- end }}
